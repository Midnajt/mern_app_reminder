templatka: https://github.com/john-smilga/mern-jobify-v2
ğŸ› ğŸ› ğŸ› ğŸ› ğŸ› ğŸ› ğŸ› ğŸ› ğŸ› ğŸ› ğŸ›  MERN APP reminder ğŸ› ğŸ› ğŸ› ğŸ› ğŸ› ğŸ› ğŸ› ğŸ› ğŸ› ğŸ› ğŸ› 

âšœ SETUP
    npm create vite@latest client -- --template react 

    favicon.io

    â—½tanstack/react-query - ZarzÄ…dza stanem danych asynchronicznych i ich buforowaniem w aplikacjach React.
    â—½tanstack/react-query-devtools - NarzÄ™dzie deweloperskie do debugowania i monitorowania stanu oraz zapytaÅ„ zarzÄ…dzanych przez React Query.
    â—½axios - Biblioteka do wykonywania zapytaÅ„ HTTP z obietnicami w JavaScript.
    â—½dayjs - Lekka biblioteka do manipulacji i formatowania dat oraz czasu.
    â—½react-icons - ZbiÃ³r ikon dostÄ™pnych jako komponenty React z rÃ³Å¼nych bibliotek.
    â—½react-router-dom - Biblioteka do obsÅ‚ugi routingu w aplikacjach React z moÅ¼liwoÅ›ciÄ… zarzÄ…dzania nawigacjÄ… miÄ™dzy stronami.
    â—½react-toastify - UmoÅ¼liwia Å‚atwe wyÅ›wietlanie powiadomieÅ„ toast w aplikacjach React.
    â—½recharts - Biblioteka do tworzenia wykresÃ³w i wizualizacji danych w React.
    â—½styled-components - UmoÅ¼liwia tworzenie komponentÃ³w React z wbudowanym stylem CSS w sposÃ³b deklaratywny.

âšœ REACT ROUTER
    â—½ npm i react-router-dom
    â—½ dostarcza loaders oraz actions
    â—½ dziÄ™ki niemu jest potrzebnych mniej global state'Ã³w
    â—½ strony sÄ… niezaleÅ¼nymi bytami
    
âšœ STYLED COMPONENTS
    â—½ npm install styled-components
    â—½ CSS pisany w JS
    â—½ komponenety mogÄ… mieÄ‡ takie same nazwy klasy, przy kompilacjiklasy zamieniane sÄ… na hashe
    â—½ umoÅ¼liwiajÄ… wykorzystywanie logiki z js
    â—½
    â—½

âšœ SERVER
    â—½ aby korzystaÄ‡ z ES modules, naleÅ¼y dodaÄ‡ '"type": "module",' w package.json
    â—½ przy importach koniecznie trzeba dodawaÄ‡ rozszerzenie pliku (przewaÅ¼nie .js)
    
    â—½ express: Minimalistyczny framework do budowy aplikacji webowych i API w Node.js.
    â—½ *nodemon: NarzÄ™dzie do automatycznego restartowania aplikacji Node.js po wykryciu zmian w kodzie.
        - *node 18.11 umoÅ¼liwia wykorzytywanie funkcji watch, ktÃ³ra zapewnia taki sam efekt, uruchom projekt komendÄ… 'node --watch server.js'
    â—½ morgan: Middleware dla Express.js do logowania zapytaÅ„ HTTP.
    â—½ dotenv: Biblioteka do Å‚adowania zmiennych Å›rodowiskowych z pliku .env do process.env.
    â—½ nanoid: Biblioteka do generowania unikalnych identyfikatorÃ³w.
    â—½ mongoose: Biblioteka do modelowania danych MongoDB w Node.js. Baza danych jest na https://cloud.mongodb.com/
    â—½ bcryptjs: Biblioteka do hashowania haseÅ‚ w JavaScript, zapewniajÄ…ca bezpieczne przechowywanie haseÅ‚ uÅ¼ytkownikÃ³w.
    â—½ concurrently: NarzÄ™dzie umoÅ¼liwiajÄ…ce rÃ³wnoczesne uruchamianie wielu poleceÅ„ w jednym terminalu.
    â—½ cookie-parser: Middleware dla Express.js do obsÅ‚ugi ciasteczek (cookies) w aplikacjach Node.js.
    â—½ dayjs: Lekka biblioteka do manipulacji i formatowania dat oraz czasu.
    â—½ express-async-errors: Middleware dla Express.js, ktÃ³ry automatycznie obsÅ‚uguje bÅ‚Ä™dy asynchroniczne.
    â—½ express-validator: Middleware dla Express.js do walidacji danych wejÅ›ciowych.
    â—½ http-status-codes: Biblioteka zawierajÄ…ca staÅ‚e dla kodÃ³w statusu HTTP.
    â—½ jsonwebtoken: Biblioteka do generowania i weryfikacji tokenÃ³w JWT (JSON Web Tokens).
    â—½ multer: Middleware dla Express.js do obsÅ‚ugi przesyÅ‚ania plikÃ³w.
    â—½ cloudinary: UsÅ‚uga do zarzÄ…dzania i przetwarzania zasobÃ³w multimedialnych w chmurze.
    â—½ datauri: NarzÄ™dzie do konwersji plikÃ³w na URI danych.
    â—½ helmet: Middleware dla Express.js zwiÄ™kszajÄ…cy bezpieczeÅ„stwo aplikacji poprzez ustawienie odpowiednich nagÅ‚Ã³wkÃ³w HTTP.
    â—½ express-rate-limit: Middleware dla Express.js do ograniczania liczby zapytaÅ„ od jednego klienta.
    â—½ express-mongo-sanitize: Middleware dla Express.js do ochrony przed atakami NoSQL injection poprzez sanityzacjÄ™ danych wejÅ›ciowych.

    â—½ app.use(express.json()); -> dodaje middleware ktÃ³ry parsuje na json przychodzÄ…ce Å¼Ä…dania
    â—½ w node moÅ¼na uÅ¼ywaÄ‡ fetch API, przykÅ‚ad:
        fetch('https://www.course-api.com/react-useReducer-cart-project')
        .then((res) => res.json())
        .then((data) => console.log(data));
    â—½ ğŸ‘Œ CRUD to nazwa okreÅ›lajÄ…ca zestaw fundamentalnych operacji wykorzystywanych do zarzÄ…dzania danych przez aplikacjÄ™:
        - Create (Tworzenie) - Dodawanie nowych rekordÃ³w do bazy danych.
        - Read (Odczyt) - Pobieranie danych z bazy danych.
        - Update (Aktualizacja) - Modyfikowanie istniejÄ…cych rekordÃ³w w bazie danych.
        - Delete (Usuwanie) - Usuwanie rekordÃ³w z bazy danych.
    â—½
    â—½

âšœ HTTP STATUS
    â—½ 201 "Created" - Å¼Ä…danie zakoÅ„czyÅ‚o sie sukcesem w wyniku czego zostaÅ‚ utworzony nowy zasÃ³b.
    â—½ 404 "Not Found" - wskazany zasÃ³b nie zostaÅ‚ znaleziony na serwerze.
    â—½ 500 "Internal Server Error" - uÅ¼ywany przez serwer do wskazania, Å¼e wystÄ…piÅ‚ nieoczekiwany bÅ‚Ä…d, uniemoÅ¼liwiajÄ…cy wykonanie Å¼Ä…dania serwerowi. Serwer napotkaÅ‚ sytuacjÄ™, ktÃ³rej nie wie, jak uÅ¼yÄ‡.
    â—½
âšœ 
    â—½
    â—½
âšœ 
    â—½
    â—½
âšœ 
    â—½
    â—½
âšœ 
    â—½
    â—½